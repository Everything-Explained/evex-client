- var githubDiscussion = "https://github.com/Noumenae/client/issues/37";
- var bluebird = "http://bluebirdjs.com/docs/why-bluebird.html";
- var systemjs = "https://github.com/systemjs/systemjs";
- var jspm = "http://jspm.io/";
- var push = "http://blog.xebia.com/http2-server-push/";
- var localhost = 'https://en.wikipedia.org/wiki/Localhost';
- var aureliacli = 'http://aurelia.io/hub.html#/doc/article/aurelia/framework/latest/the-aurelia-cli';
- var base64 = 'https://www.lifewire.com/base64-encoding-overview-1166412';
- var pugg = 'https://pugjs.org/api/getting-started.html';


mixin link(href, name)
  a(href=href, target='_blank')= name


span.title major changes
ul
  li.
    General site font changed to Nunito. The previous font was a little too
    "cursivey". This one looks a lot more professional.
  li.
    This changelog has gotten some tweaks here and there
  li.
    Invites are here!! That's right, you can now request an invite directly through
    the site without needing to email anyone directly.
  li.
    The chat interface has gotten some necessary love. Emotes and general messages
    no longer collide as badly. This is a temporary adjustment as a more substantial
    separation will come in the future.
  li.
    The rules have been updated to reflect the necessity of legality. There is an
    ongoing #[+link(githubDiscussion, 'Discussion')] about why the rules have been
    expanded to include legality.
    #[i Users will also need to agree to them before signing up].
  li.
    A loader animation has been universalized (is that a word?) Well anyway, it just means
    that there are no longer different animated gifs when you're waiting for a resource
    to load. The new animation will look like a rippling pond.
  li.
    #[b Form controls]: Input boxes, text areas, and buttons...have a new look that compliments the layout.
  li.
    Updated FAQ with new layout.
  li.
    Fixed FireFox font rendering.
  li.
    Removed error UI notification. This is a big one because I know how annoying it could be.

span.title under the hood
ul
  li.
    Modal code has been updated to be more responsive and less taxing on the browser.
  li.
    Now using #[+link(aureliacli, "Aurelia's built-in CLI")] to bundle, which means no more
    #[+link(systemjs, 'SystemJS')] or #[+link(jspm, 'JSPM')].
  li.
    Now using #[+link(bluebird, 'BlueBird')] promises. This came with the new Aurelia-CLI anyway, so it was
    convenient.
  li.
    Switched to #[b HTTP/2] protocol, which just means a bit more efficient website transfer and
    features I might utilize like #[+link(push, 'Server Push')].
  li.
    #[b Inlining assets]. This means that html, images, fonts, and 3rd party libraries, where possible,
    are appended within a resource and transported all at once instead of on-demand. Because of the
    new Aurelia-CLI, old dependencies were removed and all script/html files are now bundled. A
    server request (which can be time consuming) is no longer necessary to display a page as it's been
    included when you visit the site for the first time.#[br]#[br]
    For #[b v0.7.0] I decided it would be best to serve #[+link(pugg, 'PUG')] files, but I realized
    I was mainly using it for it's succinct syntax over HTML, so I stripped PUG support
    for #[b v0.11.0]. This means that all pages the used to be PUG, would now be normal HTML pages
    which could now be bundled by the Aurelia-CLI.#[br]#[br]
    There are caveats like this page (the changelog) where a server request is still necessary for
    real-time updates. Let's say I forgot to add something to the changelog; if it was bundled with the
    site, there would be no way to change it, but since the server still serves this page, it will
    always be up-to-date.#[br]#[br]
    #[i The best part about all this?] A #[b 1 - 1.5] second decrease in loading time.
    Considering that the site @#[b v0.7.0] took ~3 seconds to load, that's an incredible boost in speed.

  li.
    Updated and added Admin facilities here and there.
  li.
    #[b FIX:] When losing a socket connection, the console would double-log it.

span.title Performance
  ul
    li.
      Within Alpha development there generally isn't a lot of time for performance tuning,
      but given the nature of Web development, some things come before others and it just so
      happens that bundling is a big part of this application.